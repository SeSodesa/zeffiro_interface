function volumes = element_volumes ( self, inds )
%
% volumes = element_volumes ( self, inds )
%
% Computes the signed volumes of the elements in this finite element mesh.
%

    arguments

        self (1,1) core.TetraMesh

        inds (:,1) uint64 { mustBePositive } = 1 : self.element_count

    end

    % Directed edges E from 4th vertex of each tetrahedron.

    T = self.tetra ( inds, : ) ;

    N = self.nodes ;

    N1 = N ( T ( : , 1 ) , : ) ;

    N2 = N ( T ( : , 2 ) , : ) ;

    N3 = N ( T ( : , 3 ) , : ) ;

    N4 = N ( T ( : , 4 ) , : ) ;

    E = [ N1' ; N2' ; N3' ] - repmat ( N4', 3, 1 );

    % Index matrix used in the determinant calculation.
    %
    % TODO: make it so we don't need to transposes above.

    im = [ 1 4 7 ; 2 5 8 ; 3 6 9 ];

    % The volume itself as a determinant, with a scalar coefficient suitable
    % for tetrahedral volumes.

    volumes = ( 1 / 6 ) * ( ...
        E(im(1,1),:) ...
        .* ...
        ( ...
           E(im(2,2),:) ...
           .* ...
           E(im(3,3),:) ...
        - ...
           E(im(2,3),:) ...
           .* ...
           E(im(3,2),:) ...
        ) ...
    - ...
        E(im(1,2),:) ...
        .* ...
        ( ...
            E(im(2,1),:) ...
            .* ...
            E(im(3,3),:) ...
        - ...
            E(im(2,3),:) ...
            .* ...
            E(im(3,1),:) ...
        ) ...
    + ...
        E(im(1,3),:) ...
        .* ...
        ( ...
            E(im(2,1),:) ...
            .* ...
            E(im(3,2),:) ...
        - ...
            E(im(2,2),:) ...
            .* ...
            E(im(3,1),:) ...
        ) ...
    ) ;

    if isrow ( volumes )

        volumes = transpose ( volumes ) ;

    end % if

end % function
