function L = zef_lead_field_interpolation( ...
    p_nodes, ...
    p_tetrahedra, ...
    p_n_of_electrodes, ...
    p_source_model, ...
    p_source_nonzero_inds, ...
    p_L_fi, ...
    p_fi_adjacency_mat, ...
    p_fi_source_locations, ...
    p_fi_source_directions, ...
    p_L_ew, ...
    p_ew_adjacency_mat, ...
    p_ew_source_locations, ...
    p_ew_source_directions ...
)

    % Interpolates a given lead field p_n_of_electrodes (p for parameter) with position-based
    % optimization (PBO), based on the given source model. Note that even in
    % the case of Whitney-type interpolation, the edgewise source directions
    % must be given as an empty array. Returns an empty lead field in case of
    % an error.

    L = [];

    % Open up a waitbar

    wbtitle = 'Lead field H(div) interpolation';
    wb = waitbar(0, wbtitle);

    % Define cleanup operations, in case of an interruption.

    cleanupfn = @(wb) close(wb);
    cleanupobj = onCleanup(@() cleanupfn(wb));

    % Form initial values based on given nodes, tetrahedra and lead field.

    c_tet = zef_tetra_barycentra(p_nodes, p_tetrahedra);

    n_of_nonzero_inds = size(p_source_nonzero_inds,1);

    L = zeros(p_n_of_electrodes, 3 * n_of_nonzero_inds);

    % H(div) handles both the face-intersecting and edgewise cases.

    tic;

    for i = 1 : n_of_nonzero_inds

        % Find nonzero indices.

        ind_vec_aux_fi = full(find(p_fi_adjacency_mat(:,p_source_nonzero_inds(i))));
        ind_vec_aux_ew = full(find(p_ew_adjacency_mat(:,p_source_nonzero_inds(i))));

        % N of non-zero object function coefficients

        n_coeff_fi = length(ind_vec_aux_fi);
        n_coeff_ew = length(ind_vec_aux_ew);
        n_coeff = n_coeff_fi + n_coeff_ew;

        % Non-zero locations and directions.

        loc_mat = [ ...
            p_fi_source_directions(ind_vec_aux_fi,:) ; ...
            p_ew_source_directions(ind_vec_aux_ew,:) ...
        ];

        dir_mat = [ ...
            p_fi_source_locations(ind_vec_aux_fi,:) ; ...
            p_ew_source_locations(ind_vec_aux_ew,:) ...
        ];

        % Differences between barycentra and positions.

        omega_vec = sqrt(sum(( dir_mat - c_tet(p_source_nonzero_inds(i) * ones(n_coeff,1),:) ).^2 , 2));

        % Position-based optimization.

        PBO_mat = [ ...
            diag(omega_vec) loc_mat; ...
            loc_mat' zeros(3,3) ...
        ];

        % Solve for Lagrangian multipliers

        Coeff_mat = PBO_mat \ [zeros(n_coeff,3); eye(3)];

        % Interpolate lead field.

        L(:, 3 * (i-1)+1:3*i) = ...
            p_L_fi(:,ind_vec_aux_fi) ...
            * ...
            Coeff_mat(1:n_coeff_fi,:) ...
            + ...
            p_L_ew(:,ind_vec_aux_ew) ...
            * ...
            Coeff_mat(n_coeff_fi+1:n_coeff,:) ...
        ;

        if mod(i,floor(n_of_nonzero_inds/50))==0

            time_val = toc;

            waitbar( ...
                i/n_of_nonzero_inds, ...
                wb, ...
                [wbtitle, '. Ready: ' datestr(datevec(now+(n_of_nonzero_inds/i - 1)*time_val/86400)) '.'] ...
            );
        end
    end
end
