classdef Forwarder

    %
    % Forwarder
    %
    % A class that implements and documents the behaviour of the Zeffiro
    % forward solver. Contains as its properties the parameters related to
    % lead field construction. Contained methods take care of constructing
    % lead fields of different modalities.
    %

    properties

        %
        % modality
        %
        % The modality that is used to choose which type of lead field is to
        % be constructed.
        %
        modality (1,1) string { mustBeMember(modality, ["EEG", "MEG", "tES"]) } = "EEG"

        %
        % acceptable_source_depth
        %
        % A non-negative real value that determines how far from the active
        % layer surface FE nodes have to be from, in order for the tetra they
        % are part of to be involved in source positioning.
        %
        % NOTE: even if this is set to 0, the surface-most tetra are peeled
        % off. This is because the peeling algorithm only accepts tetra whose
        % all nodes are deep enough in the active layer, instead of considering
        % their barycenters, or some other mean position.
        %
        acceptable_source_depth (1,1) double { mustBeReal, mustBeNonnegative } = 0

        %
        % n_of_sources
        %
        % The positive number of sources the source positioning algorithm
        % tries to place inside of the active layer. Building a lead field
        % makes no sense if there are no sources of brain activity, hence the
        % restriction.
        %
        n_of_sources (1,1) int32 { mustBePositive } = 1

        %
        % lead_field_filter_quantile
        %
        % The lead field construction routine will check the column norms of
        % the resulting lead field, and remove columns, whose norms are above
        % this quantile. Being a statistical quantile, this must be between 0
        % and 1.
        %
        lead_field_filter_quantile (1,1) double { ...
            mustBeGreaterThanOrEqual(lead_field_filter_quantile, 0), ...
            mustBeLessThanOrEqual(lead_field_filter_quantile, 1), ...
        } = 1

        %
        % optimization_system_type
        %
        % Determines which optimization scheme will be used during source
        % interpolation. One of
        %
        % - "PBO" or Position-Based Optimization,
        % - "MPO" or Mean Posotion and Orientation and
        % - "None" for no specific scheme.
        %
        % The "None" case is mainly suited for the St. Venant source model, as
        % this field is ignored when it is used.
        %
        optimization_system_type (1,1) string { ...
            mustBeMember(optimization_system_type, ["PBO", "MPO", "None"])
        } = "PBO"

        %
        % source_model
        %
        % Determines how sources are placed into the finite element mesh.
        % One of
        %
        % - "H(div)" or face-intersecting + edgewise sources
        % - "Whitney" or face-intersecting sources or
        % - "St. Venant" for monopolar source interpolation.
        %
        % The property optimization system type determines how the sources
        % generated by each of these options are interpolated.
        %
        source_model (1,1) string { mustBeMember( ...
            source_model, ...
            ["H(div)", "Whitney", "St. Venant"] ...
        ) } = "H(div)"

    end % properties

    methods

        function self = Forwarder(args)

            %
            % Forwarder
            %
            % The constructor for this class. Takes as its arguments
            % nameâ€“value pairs, with names and values equal to the properties
            % of this class.
            %

            arguments

                args.modality = "EEG"

                args.acceptable_source_depth = 0

                args.source_model = "H(div)"

                args.optimization_system_type = "PBO"

                args.n_of_sources = 1

                args.lead_field_filter_quantile = 1

            end

            self.acceptable_source_depth = args.acceptable_source_depth;

            self.lead_field_filter_quantile = args.lead_field_filter_quantile;

            self.modality = args.modality;

            self.source_model = args.source_model;

            self.optimization_system_type = args.optimization_system_type;

            self.n_of_sources = args.n_of_sources;

        end % function

    end % methods

end % classdef
