function vec = zef_ES_table(data_aux)
%% Pre-allocate table and properties
var_names = {...
    'Residual', ...
    'Maximum current', ...
    'Sparsity (2-norm/1-norm) ratio',...
    'Focused current density', ...
    'Nuisance current density', ...
    'Angle error', ...
    'Relative magnitude difference', ...
    'Relative difference measure', ...
    'Field ratio',...
    'NNZ',...
    'Total dose', ...
    'Run time',...
    'Alpha', ...
    'Beta',...
    'Optimizer flag value',...
    'ES Channels', ...
    };

var_units = {'%' 'mA' '%' 'A/m^2' 'A/m^2' 'deg' '%' '%' '%' 'NNZ'  'mA' 's' 'dB' 'dB' 'flag' 'ell'};

meta_type = {...
    'minimum', ...
    'maximum', ...
    'maximum', ...
    'maximum', ...
    'minimum', ...
    'minimum', ...
    'minimum', ...
    'minimum', ...
    'maximum', ...
    'minimum', ...
    'minimum', ...
    'none', ...
    'none', ...
    'none', ...
    'none',...
    'none', ...
    };

if nargin == 0
    residual     = [];
    max_current  = [];
    sparsity     = [];
    source_amp   = [];
    off_field    = [];
    angle_error  = [];
    mag          = [];
    rdm          = [];
    field_ratio  = [];
    nnz          = [];
    y_ES         = [];
    run_time     = [];
    alpha        = [];
    beta         = [];
    flag_value   = [];
    channels     = [];
else
    residual     = 100*cell2mat(data_aux.residual);
    max_current  = zeros(size(data_aux.y_ES));
    sparsity     = zeros(size(data_aux.y_ES));
    source_amp   = cell2mat(data_aux.field_source.amplitude);
    off_field    = cell2mat(data_aux.field_source.avg_off_field);
    angle_error  = cell2mat(data_aux.field_source.angle);
    mag          = 100*cell2mat(data_aux.field_source.relative_norm_error);
    rdm          = 100*cell2mat(data_aux.field_source.relative_error);
    field_ratio  = max(0, source_amp./off_field);
    nnz          = cell2mat(data_aux.nnz);
    y_ES         = zeros(size(data_aux.y_ES));
    run_time     = cell2mat(data_aux.run_time);
    flag_value   = cell2mat(data_aux.flag);
    alpha        = db(data_aux.alpha);
    beta         = db(data_aux.beta);
    channels     = data_aux.y_ES;

    for i_aux = 1:size(data_aux.y_ES, 1)
        for j_aux = 1:size(data_aux.y_ES, 2)
            y_ES(i_aux,j_aux)        = 1000*norm(cell2mat(data_aux.y_ES(i_aux, j_aux)), 1);
            max_current(i_aux,j_aux) = 1000*max(abs(cell2mat(data_aux.y_ES(i_aux, j_aux))));
            sparsity(i_aux,j_aux)    = 100*sqrt(2)*norm(cell2mat(data_aux.y_ES(i_aux, j_aux)), 2)/norm(cell2mat(data_aux.y_ES(i_aux, j_aux)), 1);
        end
    end
end
%% Allocate values and properties in table
vec_temp = ({...
    residual, ...
    max_current, ...
    sparsity, ...
    source_amp, ...
    off_field, ...
    angle_error, ...
    mag, ...
    rdm, ...
    field_ratio, ...
    nnz,...
    y_ES ...
    run_time,...
    alpha, ...
    beta, ...
    flag_value, ...
    channels...
    });

vec = array2table(vec_temp, 'VariableNames', var_names);
vec.Properties.VariableUnits = var_units;
vec.Properties.VariableDescriptions = meta_type;
end
