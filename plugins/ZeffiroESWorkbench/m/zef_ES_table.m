function vec = zef_ES_table(varargin)
%% Pre-allocate table and properties

    var_names = {...
        'Total dose', ...
        'Residual', ...
        'Maximum current', ...
        'Sparsity (2-norm/1-norm) ratio',...
        'Focused current density', ...
        'Nuisance current density', ...
        'Angle error', ...
        'Relative magnitude difference', ...
        'Relative difference measure', ...
        'Field ratio',...
        'NNZ',...
        'Run time',...
        'Alpha', ...
        'Beta',...
        'Optimizer flag value',...
        'ES Channels'};

    var_units = {'mA' '%' 'mA' '%' 'A/m^2' 'A/m^2' 'deg' '%' '%' '%' 'NNZ' 's' 'dB' 'dB' 'flag', 'ell'};

    meta_type = {...
        'none', ...
        'minimum', ...
        'maximum', ...
        'maximum', ...
        'maximum', ...
        'minimum', ...
        'minimum', ...
        'minimum', ...
        'minimum', ...
        'maximum', ...
        'minimum', ...
        'none', ...
        'none', ...
        'none', ...
        'none',...
        'none'};
if nargin == 0
    y_ES         = [];
    residual     = [];
    max_current  = [];
    sparsity     = [];
    source_amp   = [];
    off_field    = [];
    angle_error  = [];
    mag          = [];
    rdm          = [];
    field_ratio  = [];
    nnz          = [];
    run_time     = [];
    alpha        = [];
    beta         = [];
    flag_value   = [];
    channels     = [];
else
    zef = varargin{1};
    load_aux = zef.y_ES_interval;

    y_ES         = zeros(size(zef.y_ES_interval.y_ES));
    residual     = 100*cell2mat(zef.y_ES_interval.residual);
    max_current  = zeros(size(zef.y_ES_interval.y_ES));
    sparsity     = zeros(size(zef.y_ES_interval.y_ES));
    source_amp   = cell2mat(zef.y_ES_interval.field_source.amplitude);
    off_field    = cell2mat(zef.y_ES_interval.field_source.avg_off_field);
    angle_error  = cell2mat(zef.y_ES_interval.field_source.angle);
    mag          = 100*cell2mat(zef.y_ES_interval.field_source.relative_norm_error);
    rdm          = 100*cell2mat(zef.y_ES_interval.field_source.relative_error);
    field_ratio  = max(0, source_amp./off_field);
    nnz          = cell2mat(zef.y_ES_interval.nnz);
    run_time     = cell2mat(zef.y_ES_interval.run_time);
    alpha        = db(zef.y_ES_interval.alpha);
    beta         = db(zef.y_ES_interval.beta);
    flag_value   = cell2mat(zef.y_ES_interval.flag);
    channels     = zef.y_ES_interval.y_ES;

    for i_aux = 1:size(zef.y_ES_interval.y_ES, 1)
        for j_aux = 1:size(zef.y_ES_interval.y_ES, 2)
            y_ES(i_aux,j_aux)        = 1000*norm(cell2mat(zef.y_ES_interval.y_ES(i_aux, j_aux)), 1);
            max_current(i_aux,j_aux) = 1000*max(abs(cell2mat(zef.y_ES_interval.y_ES(i_aux, j_aux))));
            sparsity(i_aux,j_aux)    = 100*sqrt(2)*norm(cell2mat(zef.y_ES_interval.y_ES(i_aux, j_aux)), 2)/norm(cell2mat(zef.y_ES_interval.y_ES(i_aux, j_aux)), 1);
        end
    end
end
%% Allocate values and properties in table
vec_temp = ({...
    y_ES, ...
    residual, ...
    max_current, ...
    sparsity, ...
    off_field, ...
    source_amp, ...
    angle_error, ...
    mag, ...
    rdm, ...
    field_ratio, ...
    nnz,...
    run_time,...
    alpha, ...
    beta, ...
    flag_value, ...
    channels ...
    });

vec = array2table(vec_temp, 'VariableNames', var_names);
vec.Properties.VariableUnits = var_units;
vec.Properties.VariableDescriptions = meta_type;
end